from sklearn.ensemble import RandomForestClassifier
import streamlit as st
import pandas as pd
import seaborn as sns
from sklearn.preprocessing import OneHotEncoder
import matplotlib.pyplot as plt
from sklearn.decomposition import PCA
from sklearn.preprocessing import StandardScaler
import streamlit as st
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, classification_report

def main():
    st.title("MALWARE DETECTION")

    
    data = pd.read_csv('Malware dataset.csv')

        # Display the dataset
    st.write("### Malware Dataset")
    st.write(data)

    
 
    column_to_encode = 'classification'
    encoder = OneHotEncoder(drop='first')  
    encoded_data = encoder.fit_transform(data[[column_to_encode]])
    encoded_df = pd.DataFrame(encoded_data, columns=encoder.get_feature_names_out([column_to_encode]))
    data = data.drop(column_to_encode, axis=1)
    data = pd.concat([data, encoded_df], axis=1)
    columns_to_drop = ['usage_counter', 'normal_prio', 'policy','task_size', 'cached_hole_size','vm_pgoff','nr_ptes', 'cgtime', 'signal_nvcsw','lock','min_flt','hiwater_rss']
    data.drop(columns=columns_to_drop, inplace=True)
    numerical_columns = ['millisecond', 'prio', 'static_prio', 
                              'vm_truncate_count', 'free_area_cache', 
                             'mm_users', 'map_count',  'total_vm', 'shared_vm', 'exec_vm', 'reserved_vm'
                             , 'end_data', 'last_interval', 'nvcsw', 'nivcsw', 'maj_flt', 
                             'fs_excl_counter',  'utime', 'stime', 'gtime']

        # Plot histograms for numerical features
    st.write("Distribution of Numerical Features")
    for column in numerical_columns:
            plt.figure(figsize=(8, 6))
            plt.hist(data[column], bins=30)
            plt.title(f"Histogram of {column}")
            plt.xlabel(column)
            plt.ylabel("Frequency")
            st.pyplot()

    encoded_df = pd.get_dummies(data['hash'], prefix='encoded')


    df_encoded = pd.concat([data, encoded_df], axis=1)
    df = df_encoded.drop('hash', axis=1)
    if 'classification_malware' in df.columns:
     df.drop('classification_malware', axis=1, inplace=True)

    scaler = StandardScaler()
    X_scaled = scaler.fit_transform(df)


    pca = PCA(n_components=2)  
    X_pca = pca.fit_transform(X_scaled)


    df_pca = pd.DataFrame(data=X_pca, columns=['PC1', 'PC2'])

    if 'classification_malware' in df.columns:
      df_pca['classification_malware'] = df['classification_malware']

    st.write("PCA Visualization")
    fig, ax = plt.subplots(figsize=(8, 6))
    ax.scatter(df_pca['PC1'], df_pca['PC2'], alpha=1)
    ax.set_title('PCA Visualization')
    ax.set_xlabel('Principal Component 1')
    ax.set_ylabel('Principal Component 2')
    ax.grid(True)
    st.pyplot(fig)

if __name__ == "__main__":
    main()





